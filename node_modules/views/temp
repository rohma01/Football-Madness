<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Room - {{ data.roomId }}</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      height: 100vh;
    }

    #container {
      display: flex;
      flex-direction: column;
      width: 100%;
    }

    #boxA {
      flex: 1;
      border: 1px solid #ccc;
      padding: 10px;
      height: 50vh;
      overflow-y: auto;
    }

    .playerRow {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    #playerDetails {
      flex: 1;
      padding: 10px;
      border: 1px solid #ccc;
    }

    #teamBoxes {
      display: flex;
      justify-content: space-around;
      background-color: #f0f0f0;
      padding: 10px;
      margin-top: 10px;
    }

    .teamBox {
      border: 1px solid #ccc;
      padding: 10px;
      flex: 1;
      margin: 0 5px;
    }

    #finalConsentButton {
      display: none;
      margin-top: 10px;
    }
  </style>
  <script>
    const socket = io();
       const encodedString ='{{data}}'
        const parser = new DOMParser();
        const doc = parser.parseFromString(encodedString, 'text/html');
        const decodedString = doc.body.textContent;

        // Now you can parse the decoded string as JSON
        const dataTemp = JSON.parse(decodedString);


    socket.emit('joinRoom', dataTemp.roomId );
    console.log(dataTemp)
    var draftData = dataTemp.draftData;

    function roundRobinSelection(array, currentIndex) {

      return function getNext() {
        if (array.length === 0) {
          return null;  // Return null if the array is empty
        }
        currentIndex = (currentIndex + 1) % array.length; // Move to the next index in a circular manner
        const selectedElement = array[currentIndex];
        return selectedElement;
      };
    }

    socket.on('waitingForQuorum', () => {
      // Notify the user that they are waiting for more users
      alert('Waiting for more users to join the room...');
      console.log("Waiting for more users to join the room...")
    });

    socket.on('roomReady', () => {
      // Notify the user that the room is ready, and they can start chatting
      alert('Room is ready! You can start chatting.');
      console.log("room is read")
    });

    socket.on('chatMessage', (data) => {
      // Handle incoming chat messages
      console.log(`${data.username}: ${data.data}`);
      render(JSON.parse(data.data))
      // Update your UI to display the message
    });

    socket.on('userDisconnected', (userId) => {
      // Handle user disconnection
      console.log(`User disconnected: ${userId}`);
      // Update your UI to reflect the user's departure
    });

 function render(draftData) {
      // Initialize draft data
      const boxA = document.getElementById('boxA');
      const playerDetails = document.getElementById('playerDetails');
      
      const team1Box = document.getElementById('team1Box');
      const team2Box = document.getElementById('team2Box');
      const finalConsentButton = document.getElementById('finalConsentButton');

      // Function to render players in box A
      function renderPlayers() {
        boxA.innerHTML = '';
        draftData.players.forEach(player => {
          const row = document.createElement('div');
          row.className = 'playerRow';

          const playerName = document.createElement('span');
          playerName.textContent = player.name;

          const displayDetailsBtn = document.createElement('button');
          displayDetailsBtn.textContent = 'Display Details';
          displayDetailsBtn.addEventListener('click', () => showPlayerDetails(player));

          const selectBtn = document.createElement('button');
          selectBtn.textContent = 'Select';
          selectBtn.addEventListener('click', () => selectPlayer(player));
              // Check if the current player's team matches the draftingTurn
          const isCurrentTeam =  '{{teamId}}' == draftData.draftteam.draftingTurn;
          console.log("team id: "+'{{teamId}}')
          console.log(draftData.draftteam.draftingTurn)
          // Set the 'disabled' attribute based on the condition
          selectBtn.disabled = !isCurrentTeam;

          row.appendChild(playerName);
          const subrow = document.createElement('div');
          subrow.appendChild(displayDetailsBtn);
          subrow.appendChild(selectBtn);
          row.appendChild(subrow)

          boxA.appendChild(row);
        });
      }

      // Function to show player details
      function showPlayerDetails(player) {
        playerDetails.innerHTML = `
                    <h2>${player.name}</h2>
                    <p>Score: ${player.score}</p>
                    <!-- Add more details as needed -->
                `;
      }

      // Function to select a player
      function selectPlayer(player) {
        const { draftingTurn, teams} = draftData.draftteam;
        const { draftteam } = draftData
        draftteam[draftingTurn].push(player)
      
        getNext = roundRobinSelection(teams, teams.indexOf(draftingTurn))
        draftData.draftteam.draftingTurn = getNext()

        // Remove the selected player from the list
        draftData.players = draftData.players.filter(p => p.id !== player.id);

        // Update draftData.draftteam with the modified team arrays
        draftData.draftteam = draftteam;
        console.log(draftData)
        // Render updated players and team boxes
        
        renderPlayers();
        renderTeamBoxes();
        socket.emit('chatMessage', {'username':draftingTurn,'data':JSON.stringify(draftData)} );


      }

      // Function to render team boxes
      function renderTeamBoxes() {
          const teamBoxes = document.getElementById('teamBoxes');
          teamBoxes.innerHTML = '';

          draftData.draftteam.teams.forEach((team, index) => {
            const teamBox = document.createElement('div');
            teamBox.className = 'teamBox';
            teamBox.id = `teamBox${index + 1}`; // Use a unique ID for each team box

            draftData.draftteam[team].forEach(player => {
              const playerDiv = document.createElement('div');
              playerDiv.textContent = player.name;
              teamBox.appendChild(playerDiv);
            });

            teamBoxes.appendChild(teamBox);
          });
 
          // Highlight the box that belongs to draftingTurn
          draftData.draftteam.teams.forEach((team, index) => {
            const teamBox = document.getElementById(`teamBox${index + 1}`);
            teamBox.style.backgroundColor = draftData.draftteam.draftingTurn === team ? '#ffffcc' : 'transparent';
          });
      }

      // Initial rendering
      renderPlayers();
      renderTeamBoxes();

      if (draftData.draftteam.draftingTurn  == '{{teamId}}' && draftData.draftteam[draftingTurn] === draftData.total_players_per_team ) {
          finalConsentButton.style.display = 'block';
        }

      // Event listener for final consent button
      finalConsentButton.addEventListener('click', () => {
        const { draftteam } = draftData;

          if (draftteam.finalconsence) {
            alert('Final consent already given!');
          } else {
            const confirmed = confirm('Are you sure you want to give final consent?');
            if (confirmed) {
              draftteam.finalconsence = true;
              finalConsentButton.style.display = 'none';
              alert('Final consent given!');
              draftData.draftteam = draftteam;
              socket.emit('chatMessage', {'username':draftingTurn,'data':JSON.stringify(draftData)} );
            }
          }
      });
    }

  </script>
</head>

<body>
  <div id="container">
    <h3>Drafting Room - {{roomId}}</h3>
    <div id="boxA-playerDetails" style="display: flex;">
      <div id="boxA"></div>
      <div id="playerDetails"></div>
    </div>
    <div id="teamBoxes">

    </div>
    <button id="finalConsentButton">Final Consent</button>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', render(draftData));

  </script>
</body>

</html>
