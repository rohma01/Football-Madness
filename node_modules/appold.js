// const express = require('express');
// const http = require('http');
// const socketIO = require('socket.io');
// const mongoose = require('mongoose');
// const session = require('express-session');
// const bodyParser = require('body-parser');
// const bcrypt = require('bcrypt');
// const app = express();
// const server = http.createServer(app);
// const io = socketIO(server);
// const path = require('path');
// // AnotherFile.js
// const RoomManager = require('./roomManager');


// // MongoDB connection
// mongoose.connect('mongodb+srv://rohma01:footballmadness@footballmadness.wkclor2.mongodb.net/', {
//   useNewUrlParser: true,
//   useUnifiedTopology: true,
// });

// // User Schema
// const User = mongoose.model('User', {
//   username: String,
//   password: String,
// });


// // Middleware
// app.use(bodyParser.urlencoded({ extended: true }));
// app.use(session({
//   secret: 'your-secret-key',
//   resave: true,
//   saveUninitialized: true,
// }));

// app.use((req, res, next) => {
//     req.io = io;
//     return next();
//   });

//   // Define the path to your public folder
// const publicPath = path.join(__dirname, '/images/');

// // Set up the static middleware to serve files from the public folder
// app.use(express.static(publicPath));

// // Serve socket.io script
// app.get('/socket.io', (req, res) => {
//   res.sendFile(__dirname + '/node_modules/socket.io/client-dist/socket.io.js');
// });

// app.get('/socket.io/socket.io.js', (req, res) => {
//   res.sendFile(__dirname + '/node_modules/socket.io/client-dist/socket.io.js');
// });

// const activeRooms = {};
// const MAX_USER_PER_ROOM = 2;
// const roomManager = new RoomManager(MAX_USER_PER_ROOM);
// const userRoomMap ={}
// const userDetailsMap={}


// io.on('connection', (socket) => {
//   socket.on('setUsername', (userData) => {
//     console.log(`Setting username for socket ${socket.id} to ${userData.username}`)
//     socket.username = userData.username;
//     socket.userId = userData.userId;
//     userDetailsMap[socket.userId] = {...userData,'setUsernameSocketid':socket.id};
//   });

//   socket.on('joinRoom', (roomId) => {
//     console.log("roomId" + roomId);
//     socket.join(roomId);
//     socket.roomId = roomId;

//     if (!activeRooms[roomId]) {
//       activeRooms[roomId] = [];
//     }

//     activeRooms[roomId].push(socket.id);

//     // Check if the room is full (MAX_USER_PER_ROOM users)
//     if (activeRooms[roomId].length === MAX_USER_PER_ROOM) {
//       // Notify all users in the room that the chat can start
//       io.to(roomId).emit('roomReady');
//     } else {
//       // Notify the current user about waiting for more users
//       socket.emit('waitingForQuorum');
//     }
//   });

//   // Listen for chat messages
//   socket.on('chatMessage', (message) => {    
//     console.log(message)
//     io.to(socket.roomId).emit('chatMessage', message);
//   });

//   // Disconnect event
//   socket.on('disconnect', () => {
//     const roomId = socket.roomId;
//     if (roomId && activeRooms[roomId]) {
//       // Remove the disconnected user from the active room
//       activeRooms[roomId] = activeRooms[roomId].filter(id => id !== socket.id);

//       // Notify other users in the room about the disconnection
//       io.to(roomId).emit('userDisconnected', socket.id);

//       // If no users left in the room, dissolve the room
//       if (activeRooms[roomId].length === 0) {
//         delete activeRooms[roomId];
//       }
//     }
//   });
// });

// // Set the view engine to handlebars
// // Set your views directory
// app.set('views', path.join(__dirname, 'views'));
// app.set('view engine', 'hbs');


// // Routes
// app.get('/', (req, res) => {
//   res.render('index');
// });

// app.get('/login', (req, res) => {
//   res.render('login');
// });

// app.post('/login', async (req, res) => {
//     const { username, password } = req.body;
  
//     // Find the user by username
//     const user = await User.findOne({ username });
  
//     // Check if the user exists and the password is correct
//     if (user && await bcrypt.compare(password, user.password)) {
      
//       req.session.userId = user._id.toString();
//       req.session.userName = user.username;
//       roomManager.addUser(req.session.userId)
//       // Emit the 'setUsername' event to the specific socket ID
  
//       return res.redirect('/dashboard');
//     }
  
//     res.redirect('/');
//   });

// app.get('/register', (req, res) => {
//   res.render('register');
// });

// app.get('/drafting', (req, res) => {

//   const {room,roomId} = roomManager.getRoom(req.session.userId);
//   const players = [];

//   for (let i = 1; i <= 100; i++) {
//     const player = {
//       id: i,
//       name: `Player ${i}`,
//       score: Math.floor(Math.random() * 100) + 1, // Generating a random score between 1 and 100
//     };

//     players.push(player);
//   }
//   draftteam={}
//   for (r in room){
//     draftteam['final_consence_'+room[r]]=false
//     draftteam[room[r]]=[]
    
//   }
//   draftteam['teams']=room
//   draftteam['draftingTurn']=room[0]

//   const data={'roomId':roomId,
//         'MAX_USER_PER_ROOM':MAX_USER_PER_ROOM,
//         'draftData':{
//             total_players_per_team: 11,
//             players: players,
//             draftteam: draftteam,
//           }

//         }
//   if(roomId){
//     res.render('drafting', { data: JSON.stringify(data) , roomId: roomId, teamId:req.session.userId} );
//   }else{
//     res.render('temp');
//   }
  
// });

// app.post('/register', async (req, res) => {
//   const { username, password } = req.body;

//   // Check if the username already exists
//   const existingUser = await User.findOne({ username });
//   if (existingUser) {
//     return res.redirect('/register'); // You might want to display an error message here
//   }

//   // Hash the password
//   const hashedPassword = await bcrypt.hash(password, 10);

//   // Create a new user
//   const newUser = new User({
//     username,
//     password: hashedPassword,
//   });

//   // Save the user to the database
//   await newUser.save();

//   res.redirect('/login');
// });

// app.get('/dashboard', async (req, res) => {
//   // Check if the user is logged in
//   if (!req.session.userId) {
//     return res.redirect('/login');
//   }

//   try {
//     const user2 = await User.findById(req.session.userId);
//     const user = { 'username': req.session.userName, 'userId': req.session.userId }
//     req.io.emit('setUsername', user);
//     res.render('dashboard', {  user});
//   } catch (err) {
//     return res.redirect('/login');
//   }
// });

// app.get('/logout', (req, res) => {
//     roomManager.removeUser(req.session.userId)
//     req.session.destroy((err) => {
//       res.redirect('/');
//     });
//   });
  
//   const PORT = process.env.PORT || 3000;
//   server.listen(PORT, () => {
//     console.log(`Server is running on port ${PORT}`);
//   });